Interrupt Vectors
    00000 940C 0055 JMP	__start|__text_start
    00002 940C 0095 JMP	_Int0_button
    00016 940C 05A9 JMP	_usart_read
    00024 940C 00D6 JMP	_int2

Program Code (text area)
__start|__text_start:
    00055 E5CF      LDI	R28,0x5F
    00056 E0D4      LDI	R29,4
    00057 BFCD      OUT	0x3D,R28
    00058 BFDE      OUT	0x3E,R29
    00059 51CE      SUBI	R28,0x1E
    0005A 40D0      SBCI	R29,0
    0005B EA0A      LDI	R16,0xAA
    0005C 8308      ST	Y,R16
    0005D 2400      CLR	R0
    0005E EBE5      LDI	R30,0xB5
    0005F E0F0      LDI	R31,0
    00060 E010      LDI	R17,0
    00061 3CEE      CPI	R30,0xCE
    00062 07F1      CPC	R31,R17
    00063 F011      BEQ	0x0066
    00064 9201      ST	Z+,R0
    00065 CFFB      RJMP	0x0061
    00066 8300      ST	Z,R16
    00067 E5E4      LDI	R30,0x54
    00068 E0F0      LDI	R31,0
    00069 E6A0      LDI	R26,0x60
    0006A E0B0      LDI	R27,0
    0006B E010      LDI	R17,0
    0006C E000      LDI	R16,0
    0006D BF0B      OUT	0x3B,R16
    0006E 3AE9      CPI	R30,0xA9
    0006F 07F1      CPC	R31,R17
    00070 F021      BEQ	0x0075
    00071 95C8      LPM
    00072 9631      ADIW	R30,1
    00073 920D      ST	X+,R0
    00074 CFF9      RJMP	0x006E
    00075 940E 0199 CALL	_main
_exit:
    00077 CFFF      RJMP	_exit
_main_red:
    00078 98D8      CBI	0x1B,0
    00079 98D9      CBI	0x1B,1
    0007A 9508      RET
_main_green:
    0007B 9AD8      SBI	0x1B,0
    0007C 98D9      CBI	0x1B,1
    0007D 9508      RET
_main_yellow:
    0007E 98D8      CBI	0x1B,0
    0007F 9AD9      SBI	0x1B,1
    00080 9508      RET
_main_close:
    00081 9AD8      SBI	0x1B,0
    00082 9AD9      SBI	0x1B,1
    00083 9508      RET
_second_red:
    00084 98DA      CBI	0x1B,2
    00085 98DB      CBI	0x1B,3
    00086 9508      RET
_second_green:
    00087 9ADA      SBI	0x1B,2
    00088 98DB      CBI	0x1B,3
    00089 9508      RET
_second_yellow:
    0008A 98DA      CBI	0x1B,2
    0008B 9ADB      SBI	0x1B,3
    0008C 9508      RET
_second_close:
    0008D 9ADA      SBI	0x1B,2
    0008E 9ADB      SBI	0x1B,3
    0008F 9508      RET
_Int0_button_init:
    00090 E082      LDI	R24,2
    00091 BF85      OUT	0x35,R24
    00092 E480      LDI	R24,0x40
    00093 BF8B      OUT	0x3B,R24
    00094 9508      RET
_Int0_button:
    00095 922A      ST	-Y,R2
    00096 930A      ST	-Y,R16
    00097 931A      ST	-Y,R17
    00098 B62F      IN	R2,0x3F
    00099 922A      ST	-Y,R2
    0009A 9020 0060 LDS	R2,S_flag
    0009C 2022      TST	R2
    0009D F419      BNE	0x00A1
    0009E E001      LDI	R16,1
    0009F E010      LDI	R17,0
    000A0 C002      RJMP	0x00A3
    000A1 2700      CLR	R16
    000A2 2711      CLR	R17
    000A3 9300 0060 STS	S_flag,R16
    000A5 9029      LD	R2,Y+
    000A6 BE2F      OUT	0x3F,R2
    000A7 9119      LD	R17,Y+
    000A8 9109      LD	R16,Y+
    000A9 9029      LD	R2,Y+
    000AA 9518      RETI
_delay_1us:
    000AB 0000      NOP
    000AC 9508      RET
_delay_nus:
  i                    --> R20
  n                    --> R10
    000AD 940E 0782 CALL	push_xgset300C
    000AF 0158      MOVW	R10,R16
    000B0 2744      CLR	R20
    000B1 2755      CLR	R21
    000B2 C003      RJMP	0x00B6
    000B3 DFF7      RCALL	_delay_1us
    000B4 5F4F      SUBI	R20,0xFF
    000B5 4F5F      SBCI	R21,0xFF
    000B6 154A      CP	R20,R10
    000B7 055B      CPC	R21,R11
    000B8 F3D0      BCS	0x00B3
    000B9 940C 0787 JMP	pop_xgset300C
_delay_1ms:
  i                    --> R16
    000BB 2700      CLR	R16
    000BC 2711      CLR	R17
    000BD C002      RJMP	0x00C0
    000BE 5F0F      SUBI	R16,0xFF
    000BF 4F1F      SBCI	R17,0xFF
    000C0 3704      CPI	R16,0x74
    000C1 E0E4      LDI	R30,4
    000C2 071E      CPC	R17,R30
    000C3 F3D0      BCS	0x00BE
    000C4 9508      RET
_delay_nms:
  i                    --> R20
  n                    --> R10
    000C5 940E 0782 CALL	push_xgset300C
    000C7 0158      MOVW	R10,R16
    000C8 2744      CLR	R20
    000C9 2755      CLR	R21
    000CA C003      RJMP	0x00CE
    000CB DFEF      RCALL	_delay_1ms
    000CC 5F4F      SUBI	R20,0xFF
    000CD 4F5F      SBCI	R21,0xFF
    000CE 154A      CP	R20,R10
    000CF 055B      CPC	R21,R11
    000D0 F3D0      BCS	0x00CB
    000D1 940C 0787 JMP	pop_xgset300C
FILE: C:\Users\Administrator\Desktop\交通灯\TrafficLight595\ds1307.c
(0001) 
(0002) #include <iom16v.h>
(0003) #include <macros.h>
(0004) #include"twi.h"
(0005) #include"usart.h"
(0006) 
(0007) uchar time[7]={0};         //读取ds1207内部存储的数据
(0008) uchar secCount=0;
(0009) 
(0010) 
(0011) void int2_init(void)       //配置外部中断2
(0012) {
(0013)     DDRB&=~BIT(2);
_int2_init:
    000D3 98BA      CBI	0x17,2
(0014) 	PORTB|=BIT(2);
    000D4 9AC2      SBI	0x18,2
    000D5 9508      RET
_int2:
  time_buf             --> R20
  buf                  --> R10
  i                    --> R20
    000D6 920A      ST	-Y,R0
    000D7 921A      ST	-Y,R1
    000D8 922A      ST	-Y,R2
    000D9 923A      ST	-Y,R3
    000DA 924A      ST	-Y,R4
    000DB 925A      ST	-Y,R5
    000DC 926A      ST	-Y,R6
    000DD 927A      ST	-Y,R7
    000DE 928A      ST	-Y,R8
    000DF 929A      ST	-Y,R9
    000E0 930A      ST	-Y,R16
    000E1 931A      ST	-Y,R17
    000E2 932A      ST	-Y,R18
    000E3 933A      ST	-Y,R19
    000E4 938A      ST	-Y,R24
    000E5 939A      ST	-Y,R25
    000E6 93AA      ST	-Y,R26
    000E7 93BA      ST	-Y,R27
    000E8 93EA      ST	-Y,R30
    000E9 93FA      ST	-Y,R31
    000EA B60F      IN	R0,0x3F
    000EB 920A      ST	-Y,R0
    000EC 92AA      ST	-Y,R10
    000ED 934A      ST	-Y,R20
    000EE 9721      SBIW	R28,1
(0015) }
(0016) 
(0017) #pragma interrupt_handler int2:19          //一次外部中断读取一次ds1307内部存储的数据
(0018) void int2(void)
(0019) {   
(0020)     uchar i;
(0021) 	
(0022) 	GICR &= ~(1<<INT2);			//关闭下降沿触发INT2
    000EF B78B      IN	R24,0x3B
    000F0 7D8F      ANDI	R24,0xDF
    000F1 BF8B      OUT	0x3B,R24
(0023) 	
(0024) 	secCount++;
    000F2 9180 0068 LDS	R24,secCount
    000F4 5F8F      SUBI	R24,0xFF
    000F5 9380 0068 STS	secCount,R24
(0025) 	if(secCount>=(greenTime+yellowTime+redTime+yellowTime))
    000F7 9040 00B9 LDS	R4,yellowTime
    000F9 9020 00B8 LDS	R2,greenTime
    000FB 0C24      ADD	R2,R4
    000FC 9030 00B7 LDS	R3,redTime
    000FE 0C23      ADD	R2,R3
    000FF 0C24      ADD	R2,R4
    00100 1582      CP	R24,R2
    00101 F138      BCS	0x0129
(0026) 	{
(0027) 	    uchar buf=0,time_buf=12;
    00102 24AA      CLR	R10
    00103 E04C      LDI	R20,0xC
(0028) 		secCount=0;
    00104 2422      CLR	R2
    00105 9220 0068 STS	secCount,R2
(0029) 		
(0030) 		time[2]=TWI_Read(WD_DS1307_ADDR,RD_DS1307_ADDR,2);
    00107 E082      LDI	R24,2
    00108 8388      ST	Y,R24
    00109 ED21      LDI	R18,0xD1
    0010A ED00      LDI	R16,0xD0
    0010B 940E 04C9 CALL	_TWI_Read
    0010D 9300 0063 STS	time+2,R16
(0031) 		
(0032) 		if(time[2]>=0 && time[2] <= 5 && urgencyFlag==0)   //凌晨0-5点夜间模式
    0010F 3000      CPI	R16,0
    00110 F070      BCS	0x011F
    00111 E085      LDI	R24,5
    00112 1780      CP	R24,R16
    00113 F058      BCS	0x011F
    00114 9020 006C LDS	R2,urgencyFlag
    00116 2022      TST	R2
    00117 F439      BNE	0x011F
(0033) 		{
(0034) 		  nightFlag = 1;
    00118 E081      LDI	R24,1
    00119 9380 006E STS	nightFlag,R24
(0035) 		  daytimeFlag = 0;
    0011B 2422      CLR	R2
    0011C 9220 006D STS	daytimeFlag,R2
(0036) 		}else
    0011E C00A      RJMP	0x0129
(0037) 		{
(0038) 		  if(urgencyFlag==0)
    0011F 9020 006C LDS	R2,urgencyFlag
    00121 2022      TST	R2
    00122 F431      BNE	0x0129
(0039) 		  {
(0040) 		    nightFlag = 0;
    00123 2422      CLR	R2
    00124 9220 006E STS	nightFlag,R2
(0041) 	        daytimeFlag = 1;
    00126 E081      LDI	R24,1
    00127 9380 006D STS	daytimeFlag,R24
(0042) 		  }
(0043) 		}
(0044) 	}
(0045) 	
(0046) 	   
(0047) 	if(secCount%4==0)
    00129 E014      LDI	R17,4
    0012A 9100 0068 LDS	R16,secCount
    0012C 940E 0748 CALL	mod8u
    0012E 2300      TST	R16
    0012F F489      BNE	0x0141
(0048) 	{
(0049) 	  for(i=0;i<20;i++)                //清空串口暂存数组
    00130 2744      CLR	R20
    00131 C009      RJMP	0x013B
(0050) 	  {
(0051) 	    getData[i]=0;
    00132 EB8A      LDI	R24,0xBA
    00133 E090      LDI	R25,0
    00134 2FE4      MOV	R30,R20
    00135 27FF      CLR	R31
    00136 0FE8      ADD	R30,R24
    00137 1FF9      ADC	R31,R25
    00138 2422      CLR	R2
    00139 8220      ST	Z,R2
    0013A 9543      INC	R20
    0013B 3144      CPI	R20,0x14
    0013C F3A8      BCS	0x0132
(0052) 	  }
(0053) 	  delay_nms(1);
    0013D E001      LDI	R16,1
    0013E E010      LDI	R17,0
    0013F 940E 00C5 CALL	_delay_nms
(0054) 	}
(0055) 	
(0056) 	
(0057) 	GICR |= (1<<INT2);			//下降沿触发INT2
    00141 B78B      IN	R24,0x3B
    00142 6280      ORI	R24,0x20
    00143 BF8B      OUT	0x3B,R24
    00144 9621      ADIW	R28,1
    00145 9149      LD	R20,Y+
    00146 90A9      LD	R10,Y+
    00147 9009      LD	R0,Y+
    00148 BE0F      OUT	0x3F,R0
    00149 91F9      LD	R31,Y+
    0014A 91E9      LD	R30,Y+
    0014B 91B9      LD	R27,Y+
    0014C 91A9      LD	R26,Y+
    0014D 9199      LD	R25,Y+
    0014E 9189      LD	R24,Y+
    0014F 9139      LD	R19,Y+
    00150 9129      LD	R18,Y+
    00151 9119      LD	R17,Y+
    00152 9109      LD	R16,Y+
    00153 9099      LD	R9,Y+
    00154 9089      LD	R8,Y+
    00155 9079      LD	R7,Y+
    00156 9069      LD	R6,Y+
    00157 9059      LD	R5,Y+
    00158 9049      LD	R4,Y+
    00159 9039      LD	R3,Y+
    0015A 9029      LD	R2,Y+
    0015B 9019      LD	R1,Y+
    0015C 9009      LD	R0,Y+
    0015D 9518      RETI
_Read_EEprom:
  j                    --> R10
  address              --> R20
    0015E 940E 0782 CALL	push_xgset300C
    00160 01A8      MOVW	R20,R16
    00161 9BE0      SBIS	0x1C,0
    00162 C004      RJMP	0x0167
    00163 E200      LDI	R16,0x20
    00164 E010      LDI	R17,0
    00165 940E 00C5 CALL	_delay_nms
    00167 01CA      MOVW	R24,R20
    00168 7080      ANDI	R24,0
    00169 7091      ANDI	R25,1
    0016A BB8F      OUT	0x1F,R24
    0016B 01CA      MOVW	R24,R20
    0016C 7090      ANDI	R25,0
    0016D BB8E      OUT	0x1E,R24
    0016E 9AE0      SBI	0x1C,0
    0016F E200      LDI	R16,0x20
    00170 E010      LDI	R17,0
    00171 940E 00C5 CALL	_delay_nms
    00173 B2AD      IN	R10,0x1D
    00174 2D0A      MOV	R16,R10
    00175 940C 0787 JMP	pop_xgset300C
_Write_EEprom:
  address              --> R20
  data                 --> R10
    00177 940E 0782 CALL	push_xgset300C
    00179 01A9      MOVW	R20,R18
    0017A 2EA0      MOV	R10,R16
    0017B 01CA      MOVW	R24,R20
    0017C 7080      ANDI	R24,0
    0017D 7091      ANDI	R25,1
    0017E BB8F      OUT	0x1F,R24
    0017F 01CA      MOVW	R24,R20
    00180 7090      ANDI	R25,0
    00181 BB8E      OUT	0x1E,R24
    00182 BAAD      OUT	0x1D,R10
    00183 9AE2      SBI	0x1C,2
    00184 9AE1      SBI	0x1C,1
    00185 E200      LDI	R16,0x20
    00186 E010      LDI	R17,0
    00187 940E 00C5 CALL	_delay_nms
    00189 940C 0787 JMP	pop_xgset300C
FILE: C:\Users\Administrator\Desktop\交通灯\TrafficLight595\main.c
(0001) #include<iom16v.h>
(0002) #include<macros.h>
(0003) #include"MAX7219.h"
(0004) #include"74LS139.h"
(0005) #include"button.h"
(0006) #include"delay.h"
(0007) #include"ds1307.h"
(0008) #include"twi.h"
(0009) #include"usart.h"
(0010) #include"HC_595.h"
(0011) 
(0012) uchar Number_H,Number_L,count=0,i=0;
(0013) 
(0014) 
(0015) void io_init()
(0016) {
(0017)   DDRA=0xFF;
_io_init:
    0018B EF8F      LDI	R24,0xFF
    0018C BB8A      OUT	0x1A,R24
(0018)   PORTA=0x00;
    0018D 2422      CLR	R2
    0018E BA2B      OUT	0x1B,R2
(0019)   DDRB=0xff;
    0018F BB87      OUT	0x17,R24
(0020)   PORTB=0xff;
    00190 BB88      OUT	0x18,R24
(0021)   DDRC=0xe7;
    00191 EE87      LDI	R24,0xE7
    00192 BB84      OUT	0x14,R24
(0022)   PORTC=0x00;
    00193 BA25      OUT	0x15,R2
(0023)   DDRD=0x02;
    00194 E082      LDI	R24,2
    00195 BB81      OUT	0x11,R24
(0024)   PORTD=0x04;
    00196 E084      LDI	R24,4
    00197 BB82      OUT	0x12,R24
    00198 9508      RET
_main:
    00199 9721      SBIW	R28,1
(0025) }
(0026) 
(0027) void main()
(0028) {
(0029)   io_init();
    0019A DFF0      RCALL	_io_init
(0030)   TWI_init();
    0019B 940E 0487 CALL	_TWI_init
(0031)   TWI_Write(WD_DS1307_ADDR,0X10,7);           //设置ds1307输出方波
    0019D E087      LDI	R24,7
    0019E 8388      ST	Y,R24
    0019F E120      LDI	R18,0x10
    001A0 ED00      LDI	R16,0xD0
    001A1 940E 048C CALL	_TWI_Write
(0032)   int2_init();
    001A3 940E 00D3 CALL	_int2_init
(0033)   usart_init();
    001A5 940E 059E CALL	_usart_init
(0034)   HC_595_init();
    001A7 940E 06DB CALL	_HC_595_init
(0035)   
(0036)   redTime = Read_EEprom(5);      //读取红绿黄灯的时间
    001A9 E005      LDI	R16,5
    001AA E010      LDI	R17,0
    001AB 940E 015E CALL	_Read_EEprom
    001AD 9300 00B7 STS	redTime,R16
(0037)   greenTime = Read_EEprom(6);
    001AF E006      LDI	R16,6
    001B0 E010      LDI	R17,0
    001B1 940E 015E CALL	_Read_EEprom
    001B3 9300 00B8 STS	greenTime,R16
(0038)   yellowTime = Read_EEprom(7);
    001B5 E007      LDI	R16,7
    001B6 E010      LDI	R17,0
    001B7 940E 015E CALL	_Read_EEprom
    001B9 0158      MOVW	R10,R16
    001BA 92A0 00B9 STS	yellowTime,R10
(0039)   
(0040)   
(0041)   SREG|=BIT(7);
    001BC 9478      BSET	7
    001BD C285      RJMP	0x0443
(0042)   
(0043)   //修改时间
(0044)   /*
(0045)   TWI_Write(WD_DS1307_ADDR,00,0);
(0046)   TWI_Write(WD_DS1307_ADDR,21,1);
(0047)   TWI_Write(WD_DS1307_ADDR,14,2);
(0048)   TWI_Write(WD_DS1307_ADDR,17,4);
(0049)   TWI_Write(WD_DS1307_ADDR,03,5);
(0050)   TWI_Write(WD_DS1307_ADDR,17,6);
(0051)   */
(0052) 
(0053)   while(1)
(0054)   {
(0055)     if(daytimeFlag)
    001BE 9020 006D LDS	R2,daytimeFlag
    001C0 2022      TST	R2
    001C1 F409      BNE	0x01C3
    001C2 C235      RJMP	0x03F8
(0056) 	{
(0057) 	  LS139_G_L;
    001C3 98DC      CBI	0x1B,4
(0058) 	  GICR |= (1<<INT2);			//打开外部中断2
    001C4 B78B      IN	R24,0x3B
    001C5 6280      ORI	R24,0x20
    001C6 BF8B      OUT	0x3B,R24
    001C7 C053      RJMP	0x021B
(0059) 	  while(secCount<=greenTime)
(0060) 	  {
(0061) 	    if(urgencyFlag || nightFlag)break;
    001C8 9020 006C LDS	R2,urgencyFlag
    001CA 2022      TST	R2
    001CB F421      BNE	0x01D0
    001CC 9020 006E LDS	R2,nightFlag
    001CE 2022      TST	R2
    001CF F009      BEQ	0x01D1
    001D0 C0C3      RJMP	0x0294
(0062) 	    Write_Data(1,decode_H(greenTime+yellowTime-secCount));
    001D1 9020 00B9 LDS	R2,yellowTime
    001D3 2433      CLR	R3
    001D4 9100 00B8 LDS	R16,greenTime
    001D6 2711      CLR	R17
    001D7 0D02      ADD	R16,R2
    001D8 1D13      ADC	R17,R3
    001D9 9020 0068 LDS	R2,secCount
    001DB 2433      CLR	R3
    001DC 1902      SUB	R16,R2
    001DD 0913      SBC	R17,R3
    001DE D267      RCALL	_decode_H
    001DF 0158      MOVW	R10,R16
    001E0 0195      MOVW	R18,R10
    001E1 E001      LDI	R16,1
    001E2 E010      LDI	R17,0
    001E3 940E 0716 CALL	_Write_Data
(0063)         Write_Data(2,decode_L(greenTime+yellowTime-secCount));
    001E5 9020 00B9 LDS	R2,yellowTime
    001E7 2433      CLR	R3
    001E8 9100 00B8 LDS	R16,greenTime
    001EA 2711      CLR	R17
    001EB 0D02      ADD	R16,R2
    001EC 1D13      ADC	R17,R3
    001ED 9020 0068 LDS	R2,secCount
    001EF 2433      CLR	R3
    001F0 1902      SUB	R16,R2
    001F1 0913      SBC	R17,R3
    001F2 D25D      RCALL	_decode_L
    001F3 0158      MOVW	R10,R16
    001F4 0195      MOVW	R18,R10
    001F5 E002      LDI	R16,2
    001F6 E010      LDI	R17,0
    001F7 940E 0716 CALL	_Write_Data
(0064) 		Write_Data(3,decode_H(greenTime-secCount));
    001F9 9020 0068 LDS	R2,secCount
    001FB 2433      CLR	R3
    001FC 9100 00B8 LDS	R16,greenTime
    001FE 2711      CLR	R17
    001FF 1902      SUB	R16,R2
    00200 0913      SBC	R17,R3
    00201 D244      RCALL	_decode_H
    00202 0158      MOVW	R10,R16
    00203 0195      MOVW	R18,R10
    00204 E003      LDI	R16,3
    00205 E010      LDI	R17,0
    00206 940E 0716 CALL	_Write_Data
(0065)         Write_Data(4,decode_L(greenTime-secCount));
    00208 9020 0068 LDS	R2,secCount
    0020A 2433      CLR	R3
    0020B 9100 00B8 LDS	R16,greenTime
    0020D 2711      CLR	R17
    0020E 1902      SUB	R16,R2
    0020F 0913      SBC	R17,R3
    00210 D23F      RCALL	_decode_L
    00211 0158      MOVW	R10,R16
    00212 0195      MOVW	R18,R10
    00213 E004      LDI	R16,4
    00214 E010      LDI	R17,0
    00215 940E 0716 CALL	_Write_Data
(0066) 		main_green();
    00217 940E 007B CALL	_main_green
(0067) 		second_red();
    00219 940E 0084 CALL	_second_red
    0021B 9020 00B8 LDS	R2,greenTime
    0021D 2433      CLR	R3
    0021E 9040 0068 LDS	R4,secCount
    00220 2455      CLR	R5
    00221 1424      CP	R2,R4
    00222 0435      CPC	R3,R5
    00223 F00C      BLT	0x0225
    00224 CFA3      RJMP	0x01C8
    00225 C06E      RJMP	0x0294
(0068) 	  }
(0069) 	  while(secCount>greenTime&&secCount<=(greenTime+yellowTime))
(0070) 	  {
(0071) 	    if(urgencyFlag || nightFlag)break;
    00226 9020 006C LDS	R2,urgencyFlag
    00228 2022      TST	R2
    00229 F421      BNE	0x022E
    0022A 9020 006E LDS	R2,nightFlag
    0022C 2022      TST	R2
    0022D F009      BEQ	0x022F
    0022E C0F7      RJMP	0x0326
(0072) 	    Write_Data(1,decode_H(greenTime+yellowTime-secCount));
    0022F 9020 00B9 LDS	R2,yellowTime
    00231 2433      CLR	R3
    00232 9100 00B8 LDS	R16,greenTime
    00234 2711      CLR	R17
    00235 0D02      ADD	R16,R2
    00236 1D13      ADC	R17,R3
    00237 9020 0068 LDS	R2,secCount
    00239 2433      CLR	R3
    0023A 1902      SUB	R16,R2
    0023B 0913      SBC	R17,R3
    0023C D209      RCALL	_decode_H
    0023D 0158      MOVW	R10,R16
    0023E 0195      MOVW	R18,R10
    0023F E001      LDI	R16,1
    00240 E010      LDI	R17,0
    00241 940E 0716 CALL	_Write_Data
(0073)         Write_Data(2,decode_L(greenTime+yellowTime-secCount));
    00243 9020 00B9 LDS	R2,yellowTime
    00245 2433      CLR	R3
    00246 9100 00B8 LDS	R16,greenTime
    00248 2711      CLR	R17
    00249 0D02      ADD	R16,R2
    0024A 1D13      ADC	R17,R3
    0024B 9020 0068 LDS	R2,secCount
    0024D 2433      CLR	R3
    0024E 1902      SUB	R16,R2
    0024F 0913      SBC	R17,R3
    00250 D1FF      RCALL	_decode_L
    00251 0158      MOVW	R10,R16
    00252 0195      MOVW	R18,R10
    00253 E002      LDI	R16,2
    00254 E010      LDI	R17,0
    00255 940E 0716 CALL	_Write_Data
(0074) 		Write_Data(3,decode_H(greenTime+yellowTime-secCount));
    00257 9020 00B9 LDS	R2,yellowTime
    00259 2433      CLR	R3
    0025A 9100 00B8 LDS	R16,greenTime
    0025C 2711      CLR	R17
    0025D 0D02      ADD	R16,R2
    0025E 1D13      ADC	R17,R3
    0025F 9020 0068 LDS	R2,secCount
    00261 2433      CLR	R3
    00262 1902      SUB	R16,R2
    00263 0913      SBC	R17,R3
    00264 D1E1      RCALL	_decode_H
    00265 0158      MOVW	R10,R16
    00266 0195      MOVW	R18,R10
    00267 E003      LDI	R16,3
    00268 E010      LDI	R17,0
    00269 940E 0716 CALL	_Write_Data
(0075)         Write_Data(4,decode_L(greenTime+yellowTime-secCount));
    0026B 9020 00B9 LDS	R2,yellowTime
    0026D 2433      CLR	R3
    0026E 9100 00B8 LDS	R16,greenTime
    00270 2711      CLR	R17
    00271 0D02      ADD	R16,R2
    00272 1D13      ADC	R17,R3
    00273 9020 0068 LDS	R2,secCount
    00275 2433      CLR	R3
    00276 1902      SUB	R16,R2
    00277 0913      SBC	R17,R3
    00278 D1D7      RCALL	_decode_L
    00279 0158      MOVW	R10,R16
    0027A 0195      MOVW	R18,R10
    0027B E004      LDI	R16,4
    0027C E010      LDI	R17,0
    0027D 940E 0716 CALL	_Write_Data
(0076) 		i++;
    0027F 9180 006A LDS	R24,i
    00281 5F8F      SUBI	R24,0xFF
    00282 9380 006A STS	i,R24
(0077) 		if(i==25)main_yellow();   //黄闪
    00284 3189      CPI	R24,0x19
    00285 F419      BNE	0x0289
    00286 940E 007E CALL	_main_yellow
    00288 C009      RJMP	0x0292
(0078) 		else if(i==50)
    00289 9180 006A LDS	R24,i
    0028B 3382      CPI	R24,0x32
    0028C F429      BNE	0x0292
(0079) 		{
(0080) 		  main_close();
    0028D 940E 0081 CALL	_main_close
(0081) 		  i=0;
    0028F 2422      CLR	R2
    00290 9220 006A STS	i,R2
(0082) 		}
(0083) 		second_red();
    00292 940E 0084 CALL	_second_red
    00294 90A0 0068 LDS	R10,secCount
    00296 90C0 00B8 LDS	R12,greenTime
    00298 2C2C      MOV	R2,R12
    00299 2433      CLR	R3
    0029A 2C4A      MOV	R4,R10
    0029B 2455      CLR	R5
    0029C 1424      CP	R2,R4
    0029D 0435      CPC	R3,R5
    0029E F46C      BGE	0x02AC
    0029F 9020 00B9 LDS	R2,yellowTime
    002A1 2433      CLR	R3
    002A2 2C4C      MOV	R4,R12
    002A3 2455      CLR	R5
    002A4 0C42      ADD	R4,R2
    002A5 1C53      ADC	R5,R3
    002A6 2C2A      MOV	R2,R10
    002A7 2433      CLR	R3
    002A8 1442      CP	R4,R2
    002A9 0453      CPC	R5,R3
    002AA F00C      BLT	0x02AC
    002AB CF7A      RJMP	0x0226
    002AC C079      RJMP	0x0326
(0084) 	  }
(0085) 	  while(secCount>(greenTime+yellowTime)&&secCount<=(greenTime+yellowTime+redTime))
(0086) 	  {
(0087) 	    if(urgencyFlag || nightFlag)break;
    002AD 9020 006C LDS	R2,urgencyFlag
    002AF 2022      TST	R2
    002B0 F421      BNE	0x02B5
    002B1 9020 006E LDS	R2,nightFlag
    002B3 2022      TST	R2
    002B4 F009      BEQ	0x02B6
    002B5 C122      RJMP	0x03D8
(0088) 	    Write_Data(1,decode_H(greenTime+yellowTime+redTime-secCount));
    002B6 9020 00B9 LDS	R2,yellowTime
    002B8 2433      CLR	R3
    002B9 9100 00B8 LDS	R16,greenTime
    002BB 2711      CLR	R17
    002BC 0D02      ADD	R16,R2
    002BD 1D13      ADC	R17,R3
    002BE 9020 00B7 LDS	R2,redTime
    002C0 2433      CLR	R3
    002C1 0D02      ADD	R16,R2
    002C2 1D13      ADC	R17,R3
    002C3 9020 0068 LDS	R2,secCount
    002C5 2433      CLR	R3
    002C6 1902      SUB	R16,R2
    002C7 0913      SBC	R17,R3
    002C8 D17D      RCALL	_decode_H
    002C9 0158      MOVW	R10,R16
    002CA 0195      MOVW	R18,R10
    002CB E001      LDI	R16,1
    002CC E010      LDI	R17,0
    002CD 940E 0716 CALL	_Write_Data
(0089)         Write_Data(2,decode_L(greenTime+yellowTime+redTime-secCount));
    002CF 9020 00B9 LDS	R2,yellowTime
    002D1 2433      CLR	R3
    002D2 9100 00B8 LDS	R16,greenTime
    002D4 2711      CLR	R17
    002D5 0D02      ADD	R16,R2
    002D6 1D13      ADC	R17,R3
    002D7 9020 00B7 LDS	R2,redTime
    002D9 2433      CLR	R3
    002DA 0D02      ADD	R16,R2
    002DB 1D13      ADC	R17,R3
    002DC 9020 0068 LDS	R2,secCount
    002DE 2433      CLR	R3
    002DF 1902      SUB	R16,R2
    002E0 0913      SBC	R17,R3
    002E1 D16E      RCALL	_decode_L
    002E2 0158      MOVW	R10,R16
    002E3 0195      MOVW	R18,R10
    002E4 E002      LDI	R16,2
    002E5 E010      LDI	R17,0
    002E6 940E 0716 CALL	_Write_Data
(0090) 		Write_Data(3,decode_H(greenTime+yellowTime+yellowTime+redTime-secCount));
    002E8 90A0 00B9 LDS	R10,yellowTime
    002EA 2C2A      MOV	R2,R10
    002EB 2433      CLR	R3
    002EC 9100 00B8 LDS	R16,greenTime
    002EE 2711      CLR	R17
    002EF 0D02      ADD	R16,R2
    002F0 1D13      ADC	R17,R3
    002F1 2433      CLR	R3
    002F2 0D02      ADD	R16,R2
    002F3 1D13      ADC	R17,R3
    002F4 9020 00B7 LDS	R2,redTime
    002F6 2433      CLR	R3
    002F7 0D02      ADD	R16,R2
    002F8 1D13      ADC	R17,R3
    002F9 9020 0068 LDS	R2,secCount
    002FB 2433      CLR	R3
    002FC 1902      SUB	R16,R2
    002FD 0913      SBC	R17,R3
    002FE D147      RCALL	_decode_H
    002FF 0158      MOVW	R10,R16
    00300 0195      MOVW	R18,R10
    00301 E003      LDI	R16,3
    00302 E010      LDI	R17,0
    00303 940E 0716 CALL	_Write_Data
(0091)         Write_Data(4,decode_L(greenTime+yellowTime+yellowTime+redTime-secCount));
    00305 90A0 00B9 LDS	R10,yellowTime
    00307 2C2A      MOV	R2,R10
    00308 2433      CLR	R3
    00309 9100 00B8 LDS	R16,greenTime
    0030B 2711      CLR	R17
    0030C 0D02      ADD	R16,R2
    0030D 1D13      ADC	R17,R3
    0030E 2433      CLR	R3
    0030F 0D02      ADD	R16,R2
    00310 1D13      ADC	R17,R3
    00311 9020 00B7 LDS	R2,redTime
    00313 2433      CLR	R3
    00314 0D02      ADD	R16,R2
    00315 1D13      ADC	R17,R3
    00316 9020 0068 LDS	R2,secCount
    00318 2433      CLR	R3
    00319 1902      SUB	R16,R2
    0031A 0913      SBC	R17,R3
    0031B D134      RCALL	_decode_L
    0031C 0158      MOVW	R10,R16
    0031D 0195      MOVW	R18,R10
    0031E E004      LDI	R16,4
    0031F E010      LDI	R17,0
    00320 940E 0716 CALL	_Write_Data
(0092) 		main_red();
    00322 940E 0078 CALL	_main_red
(0093) 		second_green();
    00324 940E 0087 CALL	_second_green
    00326 90A0 0068 LDS	R10,secCount
    00328 9020 00B9 LDS	R2,yellowTime
    0032A 2433      CLR	R3
    0032B 90C0 00B8 LDS	R12,greenTime
    0032D 24DD      CLR	R13
    0032E 0CC2      ADD	R12,R2
    0032F 1CD3      ADC	R13,R3
    00330 2C2A      MOV	R2,R10
    00331 2433      CLR	R3
    00332 14C2      CP	R12,R2
    00333 04D3      CPC	R13,R3
    00334 F464      BGE	0x0341
    00335 9020 00B7 LDS	R2,redTime
    00337 2433      CLR	R3
    00338 0126      MOVW	R4,R12
    00339 0C42      ADD	R4,R2
    0033A 1C53      ADC	R5,R3
    0033B 2C2A      MOV	R2,R10
    0033C 2433      CLR	R3
    0033D 1442      CP	R4,R2
    0033E 0453      CPC	R5,R3
    0033F F00C      BLT	0x0341
    00340 CF6C      RJMP	0x02AD
    00341 C096      RJMP	0x03D8
(0094) 	  }
(0095) 	  while(secCount>(greenTime+yellowTime+redTime)&&secCount<=(greenTime+yellowTime+redTime+yellowTime))
(0096) 	  {
(0097) 	    if(urgencyFlag ||nightFlag)break;
    00342 9020 006C LDS	R2,urgencyFlag
    00344 2022      TST	R2
    00345 F421      BNE	0x034A
    00346 9020 006E LDS	R2,nightFlag
    00348 2022      TST	R2
    00349 F009      BEQ	0x034B
    0034A C0AD      RJMP	0x03F8
(0098) 	    Write_Data(1,decode_H(greenTime+yellowTime+redTime+yellowTime-secCount));
    0034B 90A0 00B9 LDS	R10,yellowTime
    0034D 2C2A      MOV	R2,R10
    0034E 2433      CLR	R3
    0034F 9100 00B8 LDS	R16,greenTime
    00351 2711      CLR	R17
    00352 0D02      ADD	R16,R2
    00353 1D13      ADC	R17,R3
    00354 9020 00B7 LDS	R2,redTime
    00356 2433      CLR	R3
    00357 0D02      ADD	R16,R2
    00358 1D13      ADC	R17,R3
    00359 2C2A      MOV	R2,R10
    0035A 2433      CLR	R3
    0035B 0D02      ADD	R16,R2
    0035C 1D13      ADC	R17,R3
    0035D 9020 0068 LDS	R2,secCount
    0035F 2433      CLR	R3
    00360 1902      SUB	R16,R2
    00361 0913      SBC	R17,R3
    00362 D0E3      RCALL	_decode_H
    00363 0158      MOVW	R10,R16
    00364 0195      MOVW	R18,R10
    00365 E001      LDI	R16,1
    00366 E010      LDI	R17,0
    00367 940E 0716 CALL	_Write_Data
(0099)         Write_Data(2,decode_L(greenTime+yellowTime+redTime+yellowTime-secCount));
    00369 90A0 00B9 LDS	R10,yellowTime
    0036B 2C2A      MOV	R2,R10
    0036C 2433      CLR	R3
    0036D 9100 00B8 LDS	R16,greenTime
    0036F 2711      CLR	R17
    00370 0D02      ADD	R16,R2
    00371 1D13      ADC	R17,R3
    00372 9020 00B7 LDS	R2,redTime
    00374 2433      CLR	R3
    00375 0D02      ADD	R16,R2
    00376 1D13      ADC	R17,R3
    00377 2C2A      MOV	R2,R10
    00378 2433      CLR	R3
    00379 0D02      ADD	R16,R2
    0037A 1D13      ADC	R17,R3
    0037B 9020 0068 LDS	R2,secCount
    0037D 2433      CLR	R3
    0037E 1902      SUB	R16,R2
    0037F 0913      SBC	R17,R3
    00380 D0CF      RCALL	_decode_L
    00381 0158      MOVW	R10,R16
    00382 0195      MOVW	R18,R10
    00383 E002      LDI	R16,2
    00384 E010      LDI	R17,0
    00385 940E 0716 CALL	_Write_Data
(0100) 		Write_Data(3,decode_H(greenTime+yellowTime+redTime+yellowTime-secCount));
    00387 90A0 00B9 LDS	R10,yellowTime
    00389 2C2A      MOV	R2,R10
    0038A 2433      CLR	R3
    0038B 9100 00B8 LDS	R16,greenTime
    0038D 2711      CLR	R17
    0038E 0D02      ADD	R16,R2
    0038F 1D13      ADC	R17,R3
    00390 9020 00B7 LDS	R2,redTime
    00392 2433      CLR	R3
    00393 0D02      ADD	R16,R2
    00394 1D13      ADC	R17,R3
    00395 2C2A      MOV	R2,R10
    00396 2433      CLR	R3
    00397 0D02      ADD	R16,R2
    00398 1D13      ADC	R17,R3
    00399 9020 0068 LDS	R2,secCount
    0039B 2433      CLR	R3
    0039C 1902      SUB	R16,R2
    0039D 0913      SBC	R17,R3
    0039E D0A7      RCALL	_decode_H
    0039F 0158      MOVW	R10,R16
    003A0 0195      MOVW	R18,R10
    003A1 E003      LDI	R16,3
    003A2 E010      LDI	R17,0
    003A3 940E 0716 CALL	_Write_Data
(0101)         Write_Data(4,decode_L(greenTime+yellowTime+redTime+yellowTime-secCount));
    003A5 90A0 00B9 LDS	R10,yellowTime
    003A7 2C2A      MOV	R2,R10
    003A8 2433      CLR	R3
    003A9 9100 00B8 LDS	R16,greenTime
    003AB 2711      CLR	R17
    003AC 0D02      ADD	R16,R2
    003AD 1D13      ADC	R17,R3
    003AE 9020 00B7 LDS	R2,redTime
    003B0 2433      CLR	R3
    003B1 0D02      ADD	R16,R2
    003B2 1D13      ADC	R17,R3
    003B3 2C2A      MOV	R2,R10
    003B4 2433      CLR	R3
    003B5 0D02      ADD	R16,R2
    003B6 1D13      ADC	R17,R3
    003B7 9020 0068 LDS	R2,secCount
    003B9 2433      CLR	R3
    003BA 1902      SUB	R16,R2
    003BB 0913      SBC	R17,R3
    003BC D093      RCALL	_decode_L
    003BD 0158      MOVW	R10,R16
    003BE 0195      MOVW	R18,R10
    003BF E004      LDI	R16,4
    003C0 E010      LDI	R17,0
    003C1 940E 0716 CALL	_Write_Data
(0102) 		i++;
    003C3 9180 006A LDS	R24,i
    003C5 5F8F      SUBI	R24,0xFF
    003C6 9380 006A STS	i,R24
(0103) 		if(i==25)second_yellow();   //黄闪
    003C8 3189      CPI	R24,0x19
    003C9 F419      BNE	0x03CD
    003CA 940E 008A CALL	_second_yellow
    003CC C009      RJMP	0x03D6
(0104) 		else if(i==50)
    003CD 9180 006A LDS	R24,i
    003CF 3382      CPI	R24,0x32
    003D0 F429      BNE	0x03D6
(0105) 		{
(0106) 		  second_close();
    003D1 940E 008D CALL	_second_close
(0107) 		  i=0;
    003D3 2422      CLR	R2
    003D4 9220 006A STS	i,R2
(0108) 		}
(0109) 		main_red();
    003D6 940E 0078 CALL	_main_red
    003D8 90A0 0068 LDS	R10,secCount
    003DA 90E0 00B9 LDS	R14,yellowTime
    003DC 2C2E      MOV	R2,R14
    003DD 2433      CLR	R3
    003DE 90C0 00B8 LDS	R12,greenTime
    003E0 24DD      CLR	R13
    003E1 0CC2      ADD	R12,R2
    003E2 1CD3      ADC	R13,R3
    003E3 9020 00B7 LDS	R2,redTime
    003E5 2433      CLR	R3
    003E6 0CC2      ADD	R12,R2
    003E7 1CD3      ADC	R13,R3
    003E8 2C2A      MOV	R2,R10
    003E9 2433      CLR	R3
    003EA 14C2      CP	R12,R2
    003EB 04D3      CPC	R13,R3
    003EC F45C      BGE	0x03F8
    003ED 2C2E      MOV	R2,R14
    003EE 2433      CLR	R3
    003EF 0126      MOVW	R4,R12
    003F0 0C42      ADD	R4,R2
    003F1 1C53      ADC	R5,R3
    003F2 2C2A      MOV	R2,R10
    003F3 2433      CLR	R3
    003F4 1442      CP	R4,R2
    003F5 0453      CPC	R5,R3
    003F6 F00C      BLT	0x03F8
    003F7 CF4A      RJMP	0x0342
(0110) 	  }
(0111) 	}
(0112) 	
(0113) 	if(nightFlag)            //夜间模式
    003F8 9020 006E LDS	R2,nightFlag
    003FA 2022      TST	R2
    003FB F0E1      BEQ	0x0418
(0114) 	{ 
(0115) 	  //Write_Max7219(0x0c, 0x00);
(0116) 	  Drive_HC595(0x00,0);
    003FC 2722      CLR	R18
    003FD 2733      CLR	R19
    003FE 2700      CLR	R16
    003FF 2711      CLR	R17
    00400 940E 0702 CALL	_Drive_HC595
(0117) 	  Drive_HC595(0x00,1);
    00402 E021      LDI	R18,1
    00403 E030      LDI	R19,0
    00404 2700      CLR	R16
    00405 2711      CLR	R17
    00406 940E 0702 CALL	_Drive_HC595
(0118) 	  main_yellow();
    00408 940E 007E CALL	_main_yellow
(0119) 	  second_yellow();
    0040A 940E 008A CALL	_second_yellow
(0120) 	  delay_nms(500);
    0040C EF04      LDI	R16,0xF4
    0040D E011      LDI	R17,1
    0040E 940E 00C5 CALL	_delay_nms
(0121) 	  main_close();
    00410 940E 0081 CALL	_main_close
(0122) 	  second_close();
    00412 940E 008D CALL	_second_close
(0123) 	  delay_nms(500);
    00414 EF04      LDI	R16,0xF4
    00415 E011      LDI	R17,1
    00416 940E 00C5 CALL	_delay_nms
(0124) 	}
(0125) 	
(0126) 	if(urgencyFlag)        //紧急模式
    00418 9020 006C LDS	R2,urgencyFlag
    0041A 2022      TST	R2
    0041B F131      BEQ	0x0442
(0127) 	{
(0128) 	  //GICR &= ~(1<<INT2);			//关闭外部中断2
(0129) 	  main_red();
    0041C 940E 0078 CALL	_main_red
(0130) 	  second_red();
    0041E 940E 0084 CALL	_second_red
    00420 C020      RJMP	0x0441
(0131) 	  while(1)
(0132) 	  {
(0133) 	    if(urgencyFlag==0)break;
    00421 9020 006C LDS	R2,urgencyFlag
    00423 2022      TST	R2
    00424 F409      BNE	0x0426
    00425 C01C      RJMP	0x0442
(0134) 	    LS139_G_H;
    00426 98DC      CBI	0x1B,4
(0135) 		Write_Data(0,10);  //数码管全亮
    00427 E02A      LDI	R18,0xA
    00428 E030      LDI	R19,0
    00429 2700      CLR	R16
    0042A 2711      CLR	R17
    0042B 940E 0716 CALL	_Write_Data
(0136) 		delay_nms(500);
    0042D EF04      LDI	R16,0xF4
    0042E E011      LDI	R17,1
    0042F 940E 00C5 CALL	_delay_nms
(0137) 		LS139_G_L;
    00431 98DC      CBI	0x1B,4
(0138) 		Write_Data(0,11);  //数码管全灭
    00432 E02B      LDI	R18,0xB
    00433 E030      LDI	R19,0
    00434 2700      CLR	R16
    00435 2711      CLR	R17
    00436 940E 0716 CALL	_Write_Data
(0139) 		if(urgencyFlag==0)break;
    00438 9020 006C LDS	R2,urgencyFlag
    0043A 2022      TST	R2
    0043B F409      BNE	0x043D
    0043C C005      RJMP	0x0442
(0140) 		delay_nms(500);
    0043D EF04      LDI	R16,0xF4
    0043E E011      LDI	R17,1
    0043F 940E 00C5 CALL	_delay_nms
    00441 CFDF      RJMP	0x0421
(0141) 	  }
(0142) 	}
(0143) 	if(0)        //紧急模式
    00442 C000      RJMP	0x0443
    00443 CD7A      RJMP	0x01BE
    00444 9621      ADIW	R28,1
    00445 9508      RET
_decode_H:
  data                 --> R10
    00446 92AA      ST	-Y,R10
    00447 2EA0      MOV	R10,R16
(0144) 	{
(0145) 	  //main_yellow();
(0146) 	  second_yellow();
(0147) 	  
(0148) 	}
(0149)   }
(0150)   
(0151)   
(0152) }
(0153) 
(0154) //把秒数十位和个位分拆开
(0155) void decode_H(uchar data)
(0156) {
(0157)   Number_H=data/10;
    00448 E01A      LDI	R17,0xA
    00449 2D0A      MOV	R16,R10
    0044A 940E 074A CALL	div8u
    0044C 9300 00B6 STS	Number_H,R16
    0044E 90A9      LD	R10,Y+
    0044F 9508      RET
_decode_L:
  data                 --> R10
    00450 92AA      ST	-Y,R10
    00451 2EA0      MOV	R10,R16
(0158) }
(0159) void decode_L(uchar data)
(0160) {
(0161)   Number_L=data%10;
FILE: <library>
    00452 E01A      LDI	R17,0xA
    00453 2D0A      MOV	R16,R10
    00454 940E 0748 CALL	mod8u
    00456 9300 00B5 STS	Number_L,R16
    00458 90A9      LD	R10,Y+
    00459 9508      RET
_Write_Max7219_byte:
  i                    --> R20
  DATA                 --> R16
    0045A 934A      ST	-Y,R20
    0045B 98AF      CBI	0x15,7
    0045C E048      LDI	R20,0x8
    0045D C009      RJMP	0x0467
    0045E 98AD      CBI	0x15,5
    0045F FF07      SBRS	R16,7
    00460 C002      RJMP	0x0463
    00461 9AAE      SBI	0x15,6
    00462 C001      RJMP	0x0464
    00463 98AE      CBI	0x15,6
    00464 0F00      LSL	R16
    00465 9AAD      SBI	0x15,5
    00466 954A      DEC	R20
    00467 3041      CPI	R20,1
    00468 F7A8      BCC	0x045E
    00469 9149      LD	R20,Y+
    0046A 9508      RET
_Write_Max7219:
  dat                  --> R10
  address              --> R12
    0046B 92AA      ST	-Y,R10
    0046C 92CA      ST	-Y,R12
    0046D 2EA2      MOV	R10,R18
    0046E 2EC0      MOV	R12,R16
    0046F 98AF      CBI	0x15,7
    00470 2D0C      MOV	R16,R12
    00471 DFE8      RCALL	_Write_Max7219_byte
    00472 2D0A      MOV	R16,R10
    00473 DFE6      RCALL	_Write_Max7219_byte
    00474 9AAF      SBI	0x15,7
    00475 90C9      LD	R12,Y+
    00476 90A9      LD	R10,Y+
    00477 9508      RET
_Init_MAX7219:
    00478 EF2F      LDI	R18,0xFF
    00479 E009      LDI	R16,0x9
    0047A DFF0      RCALL	_Write_Max7219
    0047B E023      LDI	R18,3
    0047C E00A      LDI	R16,0xA
    0047D DFED      RCALL	_Write_Max7219
    0047E E027      LDI	R18,7
    0047F E00B      LDI	R16,0xB
    00480 DFEA      RCALL	_Write_Max7219
    00481 E021      LDI	R18,1
    00482 E00C      LDI	R16,0xC
    00483 DFE7      RCALL	_Write_Max7219
    00484 E021      LDI	R18,1
    00485 E00F      LDI	R16,0xF
    00486 CFE4      RJMP	_Write_Max7219
_TWI_init:
    00487 E08F      LDI	R24,0xF
    00488 B980      OUT	0x00,R24
    00489 2422      CLR	R2
    0048A B821      OUT	0x01,R2
    0048B 9508      RET
_TWI_Write:
  RegAddress           --> R12
  Wdata                --> R10
  SlaveAddress         --> R14
    0048C 940E 077B CALL	push_xgset00FC
    0048E 2EA2      MOV	R10,R18
    0048F 2EE0      MOV	R14,R16
    00490 80CE      LDD	R12,Y+6
    00491 EA84      LDI	R24,0xA4
    00492 BF86      OUT	0x36,R24
    00493 B626      IN	R2,0x36
    00494 FE27      SBRS	R2,7
    00495 CFFD      RJMP	0x0493
    00496 B181      IN	R24,0x01
    00497 7F88      ANDI	R24,0xF8
    00498 3088      CPI	R24,0x8
    00499 F011      BEQ	0x049C
    0049A E001      LDI	R16,1
    0049B C02B      RJMP	0x04C7
    0049C B8E3      OUT	0x03,R14
    0049D E884      LDI	R24,0x84
    0049E BF86      OUT	0x36,R24
    0049F B626      IN	R2,0x36
    004A0 FE27      SBRS	R2,7
    004A1 CFFD      RJMP	0x049F
    004A2 B181      IN	R24,0x01
    004A3 7F88      ANDI	R24,0xF8
    004A4 3188      CPI	R24,0x18
    004A5 F011      BEQ	0x04A8
    004A6 E001      LDI	R16,1
    004A7 C01F      RJMP	0x04C7
    004A8 B8C3      OUT	0x03,R12
    004A9 E884      LDI	R24,0x84
    004AA BF86      OUT	0x36,R24
    004AB B626      IN	R2,0x36
    004AC FE27      SBRS	R2,7
    004AD CFFD      RJMP	0x04AB
    004AE B181      IN	R24,0x01
    004AF 7F88      ANDI	R24,0xF8
    004B0 3288      CPI	R24,0x28
    004B1 F011      BEQ	0x04B4
    004B2 E001      LDI	R16,1
    004B3 C013      RJMP	0x04C7
    004B4 B8A3      OUT	0x03,R10
    004B5 E884      LDI	R24,0x84
    004B6 BF86      OUT	0x36,R24
    004B7 B626      IN	R2,0x36
    004B8 FE27      SBRS	R2,7
    004B9 CFFD      RJMP	0x04B7
    004BA B181      IN	R24,0x01
    004BB 7F88      ANDI	R24,0xF8
    004BC 3288      CPI	R24,0x28
    004BD F011      BEQ	0x04C0
    004BE E001      LDI	R16,1
    004BF C007      RJMP	0x04C7
    004C0 E984      LDI	R24,0x94
    004C1 BF86      OUT	0x36,R24
    004C2 E00A      LDI	R16,0xA
    004C3 E010      LDI	R17,0
    004C4 940E 00C5 CALL	_delay_nms
    004C6 2700      CLR	R16
    004C7 940C 0770 JMP	pop_xgset00FC
_TWI_Read:
  temp                 --> R10
  RegAddress           --> R10
  SlaveAddress_R       --> R18
  SlaveAddress_W       --> R16
    004C9 92AA      ST	-Y,R10
    004CA 80A9      LDD	R10,Y+1
    004CB EA84      LDI	R24,0xA4
    004CC BF86      OUT	0x36,R24
    004CD B626      IN	R2,0x36
    004CE FE27      SBRS	R2,7
    004CF CFFD      RJMP	0x04CD
    004D0 B903      OUT	0x03,R16
    004D1 E884      LDI	R24,0x84
    004D2 BF86      OUT	0x36,R24
    004D3 B626      IN	R2,0x36
    004D4 FE27      SBRS	R2,7
    004D5 CFFD      RJMP	0x04D3
    004D6 B181      IN	R24,0x01
    004D7 7F88      ANDI	R24,0xF8
    004D8 3188      CPI	R24,0x18
    004D9 F011      BEQ	0x04DC
    004DA E001      LDI	R16,1
    004DB C032      RJMP	0x050E
    004DC B8A3      OUT	0x03,R10
    004DD E884      LDI	R24,0x84
    004DE BF86      OUT	0x36,R24
    004DF B626      IN	R2,0x36
    004E0 FE27      SBRS	R2,7
    004E1 CFFD      RJMP	0x04DF
    004E2 B181      IN	R24,0x01
    004E3 7F88      ANDI	R24,0xF8
    004E4 3288      CPI	R24,0x28
    004E5 F011      BEQ	0x04E8
    004E6 E001      LDI	R16,1
    004E7 C026      RJMP	0x050E
    004E8 EA84      LDI	R24,0xA4
    004E9 BF86      OUT	0x36,R24
    004EA B626      IN	R2,0x36
    004EB FE27      SBRS	R2,7
    004EC CFFD      RJMP	0x04EA
    004ED B181      IN	R24,0x01
    004EE 7F88      ANDI	R24,0xF8
    004EF 3180      CPI	R24,0x10
    004F0 F011      BEQ	0x04F3
    004F1 E001      LDI	R16,1
    004F2 C01B      RJMP	0x050E
    004F3 B923      OUT	0x03,R18
    004F4 E884      LDI	R24,0x84
    004F5 BF86      OUT	0x36,R24
    004F6 B626      IN	R2,0x36
    004F7 FE27      SBRS	R2,7
    004F8 CFFD      RJMP	0x04F6
    004F9 B181      IN	R24,0x01
    004FA 7F88      ANDI	R24,0xF8
    004FB 3480      CPI	R24,0x40
    004FC F011      BEQ	0x04FF
    004FD E001      LDI	R16,1
    004FE C00F      RJMP	0x050E
    004FF E884      LDI	R24,0x84
    00500 BF86      OUT	0x36,R24
    00501 B626      IN	R2,0x36
    00502 FE27      SBRS	R2,7
    00503 CFFD      RJMP	0x0501
    00504 B181      IN	R24,0x01
    00505 7F88      ANDI	R24,0xF8
    00506 3588      CPI	R24,0x58
    00507 F011      BEQ	0x050A
    00508 E001      LDI	R16,1
    00509 C004      RJMP	0x050E
    0050A B0A3      IN	R10,0x03
    0050B E984      LDI	R24,0x94
    0050C BF86      OUT	0x36,R24
    0050D 2D0A      MOV	R16,R10
    0050E 90A9      LD	R10,Y+
    0050F 9508      RET
_TWI_Read_1307:
  data                 --> Y,+3
  RegAddress           --> R10
  SlaveAddress_R       --> R18
  SlaveAddress_W       --> R16
    00510 92AA      ST	-Y,R10
    00511 80A9      LDD	R10,Y+1
    00512 EA84      LDI	R24,0xA4
    00513 BF86      OUT	0x36,R24
    00514 B626      IN	R2,0x36
    00515 FE27      SBRS	R2,7
    00516 CFFD      RJMP	0x0514
    00517 B181      IN	R24,0x01
    00518 7F88      ANDI	R24,0xF8
    00519 3088      CPI	R24,0x8
    0051A F011      BEQ	0x051D
    0051B E001      LDI	R16,1
    0051C C039      RJMP	0x0556
    0051D B903      OUT	0x03,R16
    0051E E884      LDI	R24,0x84
    0051F BF86      OUT	0x36,R24
    00520 B626      IN	R2,0x36
    00521 FE27      SBRS	R2,7
    00522 CFFD      RJMP	0x0520
    00523 B181      IN	R24,0x01
    00524 7F88      ANDI	R24,0xF8
    00525 3188      CPI	R24,0x18
    00526 F011      BEQ	0x0529
    00527 E001      LDI	R16,1
    00528 C02D      RJMP	0x0556
    00529 B8A3      OUT	0x03,R10
    0052A E884      LDI	R24,0x84
    0052B BF86      OUT	0x36,R24
    0052C B626      IN	R2,0x36
    0052D FE27      SBRS	R2,7
    0052E CFFD      RJMP	0x052C
    0052F B181      IN	R24,0x01
    00530 7F88      ANDI	R24,0xF8
    00531 3288      CPI	R24,0x28
    00532 F011      BEQ	0x0535
    00533 E001      LDI	R16,1
    00534 C021      RJMP	0x0556
    00535 EA84      LDI	R24,0xA4
    00536 BF86      OUT	0x36,R24
    00537 B626      IN	R2,0x36
    00538 FE27      SBRS	R2,7
    00539 CFFD      RJMP	0x0537
    0053A B181      IN	R24,0x01
    0053B 7F88      ANDI	R24,0xF8
    0053C 3180      CPI	R24,0x10
    0053D F011      BEQ	0x0540
    0053E E001      LDI	R16,1
    0053F C016      RJMP	0x0556
    00540 B923      OUT	0x03,R18
    00541 E884      LDI	R24,0x84
    00542 BF86      OUT	0x36,R24
    00543 B626      IN	R2,0x36
    00544 FE27      SBRS	R2,7
    00545 CFFD      RJMP	0x0543
    00546 B181      IN	R24,0x01
    00547 7F88      ANDI	R24,0xF8
    00548 3480      CPI	R24,0x40
    00549 F011      BEQ	0x054C
    0054A E001      LDI	R16,1
    0054B C00A      RJMP	0x0556
    0054C E884      LDI	R24,0x84
    0054D BF86      OUT	0x36,R24
    0054E B626      IN	R2,0x36
    0054F FE27      SBRS	R2,7
    00550 CFFD      RJMP	0x054E
    00551 B181      IN	R24,0x01
    00552 7F88      ANDI	R24,0xF8
    00553 3588      CPI	R24,0x58
    00554 F009      BEQ	0x0556
    00555 E001      LDI	R16,1
    00556 90A9      LD	R10,Y+
    00557 9508      RET
_Twi_write_data:
  i                    --> R20
    00558 934A      ST	-Y,R20
    00559 935A      ST	-Y,R21
    0055A 9721      SBIW	R28,1
    0055B 2744      CLR	R20
    0055C 2755      CLR	R21
    0055D C008      RJMP	0x0566
    0055E 8348      ST	Y,R20
    0055F 019A      MOVW	R18,R20
    00560 5D20      SUBI	R18,0xD0
    00561 4F3F      SBCI	R19,0xFF
    00562 EA00      LDI	R16,0xA0
    00563 DF28      RCALL	_TWI_Write
    00564 5F4F      SUBI	R20,0xFF
    00565 4F5F      SBCI	R21,0xFF
    00566 3044      CPI	R20,4
    00567 E0E0      LDI	R30,0
    00568 075E      CPC	R21,R30
    00569 F3A0      BCS	0x055E
    0056A 2744      CLR	R20
    0056B 2755      CLR	R21
    0056C C00A      RJMP	0x0577
    0056D 01CA      MOVW	R24,R20
    0056E 9604      ADIW	R24,4
    0056F 8388      ST	Y,R24
    00570 019A      MOVW	R18,R20
    00571 5B2F      SUBI	R18,0xBF
    00572 4F3F      SBCI	R19,0xFF
    00573 EA00      LDI	R16,0xA0
    00574 DF17      RCALL	_TWI_Write
    00575 5F4F      SUBI	R20,0xFF
    00576 4F5F      SBCI	R21,0xFF
    00577 314A      CPI	R20,0x1A
    00578 E0E0      LDI	R30,0
    00579 075E      CPC	R21,R30
    0057A F390      BCS	0x056D
    0057B 2744      CLR	R20
    0057C 2755      CLR	R21
    0057D C00A      RJMP	0x0588
    0057E 01CA      MOVW	R24,R20
    0057F 964E      ADIW	R24,0x1E
    00580 8388      ST	Y,R24
    00581 019A      MOVW	R18,R20
    00582 592F      SUBI	R18,0x9F
    00583 4F3F      SBCI	R19,0xFF
    00584 EA00      LDI	R16,0xA0
    00585 DF06      RCALL	_TWI_Write
    00586 5F4F      SUBI	R20,0xFF
    00587 4F5F      SBCI	R21,0xFF
    00588 314A      CPI	R20,0x1A
    00589 E0E0      LDI	R30,0
    0058A 075E      CPC	R21,R30
    0058B F390      BCS	0x057E
    0058C E348      LDI	R20,0x38
    0058D E050      LDI	R21,0
    0058E C006      RJMP	0x0595
    0058F 8348      ST	Y,R20
    00590 E320      LDI	R18,0x30
    00591 EA00      LDI	R16,0xA0
    00592 DEF9      RCALL	_TWI_Write
    00593 5F4F      SUBI	R20,0xFF
    00594 4F5F      SBCI	R21,0xFF
    00595 EF8F      LDI	R24,0xFF
    00596 E090      LDI	R25,0
    00597 1784      CP	R24,R20
    00598 0795      CPC	R25,R21
    00599 F7A8      BCC	0x058F
    0059A 9621      ADIW	R28,1
    0059B 9159      LD	R21,Y+
    0059C 9149      LD	R20,Y+
    0059D 9508      RET
_usart_init:
    0059E 9888      CBI	0x11,0
    0059F 9A90      SBI	0x12,0
    005A0 9A89      SBI	0x11,1
    005A1 9A91      SBI	0x12,1
    005A2 E886      LDI	R24,0x86
    005A3 BD80      OUT	0x20,R24
    005A4 E383      LDI	R24,0x33
    005A5 B989      OUT	0x09,R24
    005A6 E988      LDI	R24,0x98
    005A7 B98A      OUT	0x0A,R24
    005A8 9508      RET
_usart_read:
  buf                  --> Y,+3
  time_buf             --> R10
  dataBuf              --> R10
  dataBuf              --> R10
  dataBuf              --> R10
    005A9 920A      ST	-Y,R0
    005AA 921A      ST	-Y,R1
    005AB 922A      ST	-Y,R2
    005AC 923A      ST	-Y,R3
    005AD 924A      ST	-Y,R4
    005AE 925A      ST	-Y,R5
    005AF 926A      ST	-Y,R6
    005B0 927A      ST	-Y,R7
    005B1 928A      ST	-Y,R8
    005B2 929A      ST	-Y,R9
    005B3 930A      ST	-Y,R16
    005B4 931A      ST	-Y,R17
    005B5 932A      ST	-Y,R18
    005B6 933A      ST	-Y,R19
    005B7 938A      ST	-Y,R24
    005B8 939A      ST	-Y,R25
    005B9 93AA      ST	-Y,R26
    005BA 93BA      ST	-Y,R27
    005BB 93EA      ST	-Y,R30
    005BC 93FA      ST	-Y,R31
    005BD B60F      IN	R0,0x3F
    005BE 920A      ST	-Y,R0
    005BF 940E 0782 CALL	push_xgset300C
    005C1 9722      SBIW	R28,2
    005C2 9B5F      SBIS	0x0B,7
    005C3 CFFE      RJMP	0x05C2
    005C4 EB8A      LDI	R24,0xBA
    005C5 E090      LDI	R25,0
    005C6 91E0 006B LDS	R30,k
    005C8 27FF      CLR	R31
    005C9 0FE8      ADD	R30,R24
    005CA 1FF9      ADC	R31,R25
    005CB B02C      IN	R2,0x0C
    005CC 8220      ST	Z,R2
    005CD 9180 006B LDS	R24,k
    005CF 5F8F      SUBI	R24,0xFF
    005D0 9380 006B STS	k,R24
    005D2 E085      LDI	R24,5
    005D3 E090      LDI	R25,0
    005D4 8399      STD	Y+1,R25
    005D5 8388      ST	Y,R24
    005D6 EB2A      LDI	R18,0xBA
    005D7 E030      LDI	R19,0
    005D8 E90E      LDI	R16,0x9E
    005D9 E010      LDI	R17,0
    005DA 940E 0734 CALL	_strncmp
    005DC 3000      CPI	R16,0
    005DD 0701      CPC	R16,R17
    005DE F509      BNE	0x0600
    005DF D0F7      RCALL	_usart_get
    005E0 E08A      LDI	R24,0xA
    005E1 E090      LDI	R25,0
    005E2 0198      MOVW	R18,R16
    005E3 018C      MOVW	R16,R24
    005E4 940E 0760 CALL	empy16s
    005E6 01C8      MOVW	R24,R16
    005E7 5E80      SUBI	R24,0xE0
    005E8 4091      SBCI	R25,1
    005E9 2EA8      MOV	R10,R24
    005EA D0EC      RCALL	_usart_get
    005EB 01A8      MOVW	R20,R16
    005EC 01CA      MOVW	R24,R20
    005ED 97C0      SBIW	R24,0x30
    005EE 2C2A      MOV	R2,R10
    005EF 2433      CLR	R3
    005F0 0E28      ADD	R2,R24
    005F1 1E39      ADC	R3,R25
    005F2 2CA2      MOV	R10,R2
    005F3 92A0 00B8 STS	greenTime,R10
    005F5 E026      LDI	R18,6
    005F6 E030      LDI	R19,0
    005F7 2D02      MOV	R16,R2
    005F8 2711      CLR	R17
    005F9 940E 0177 CALL	_Write_EEprom
    005FB E301      LDI	R16,0x31
    005FC D0D4      RCALL	_usart_send
    005FD 2422      CLR	R2
    005FE 9220 006B STS	k,R2
    00600 E083      LDI	R24,3
    00601 E090      LDI	R25,0
    00602 8399      STD	Y+1,R25
    00603 8388      ST	Y,R24
    00604 EB2A      LDI	R18,0xBA
    00605 E030      LDI	R19,0
    00606 E90A      LDI	R16,0x9A
    00607 E010      LDI	R17,0
    00608 940E 0734 CALL	_strncmp
    0060A 0158      MOVW	R10,R16
    0060B 3000      CPI	R16,0
    0060C 0701      CPC	R16,R17
    0060D F4F9      BNE	0x062D
    0060E D0C8      RCALL	_usart_get
    0060F 0158      MOVW	R10,R16
    00610 E00A      LDI	R16,0xA
    00611 E010      LDI	R17,0
    00612 0195      MOVW	R18,R10
    00613 940E 0760 CALL	empy16s
    00615 01C8      MOVW	R24,R16
    00616 5E80      SUBI	R24,0xE0
    00617 4091      SBCI	R25,1
    00618 2EA8      MOV	R10,R24
    00619 D0BD      RCALL	_usart_get
    0061A 01A8      MOVW	R20,R16
    0061B 01CA      MOVW	R24,R20
    0061C 97C0      SBIW	R24,0x30
    0061D 2C2A      MOV	R2,R10
    0061E 2433      CLR	R3
    0061F 0E28      ADD	R2,R24
    00620 1E39      ADC	R3,R25
    00621 2CA2      MOV	R10,R2
    00622 92A0 00B7 STS	redTime,R10
    00624 E025      LDI	R18,5
    00625 E030      LDI	R19,0
    00626 2D02      MOV	R16,R2
    00627 2711      CLR	R17
    00628 940E 0177 CALL	_Write_EEprom
    0062A 2422      CLR	R2
    0062B 9220 006B STS	k,R2
    0062D E086      LDI	R24,6
    0062E E090      LDI	R25,0
    0062F 8399      STD	Y+1,R25
    00630 8388      ST	Y,R24
    00631 EB2A      LDI	R18,0xBA
    00632 E030      LDI	R19,0
    00633 E903      LDI	R16,0x93
    00634 E010      LDI	R17,0
    00635 940E 0734 CALL	_strncmp
    00637 0158      MOVW	R10,R16
    00638 3000      CPI	R16,0
    00639 0701      CPC	R16,R17
    0063A F4F9      BNE	0x065A
    0063B D09B      RCALL	_usart_get
    0063C 0158      MOVW	R10,R16
    0063D E00A      LDI	R16,0xA
    0063E E010      LDI	R17,0
    0063F 0195      MOVW	R18,R10
    00640 940E 0760 CALL	empy16s
    00642 01C8      MOVW	R24,R16
    00643 5E80      SUBI	R24,0xE0
    00644 4091      SBCI	R25,1
    00645 2EA8      MOV	R10,R24
    00646 D090      RCALL	_usart_get
    00647 01A8      MOVW	R20,R16
    00648 01CA      MOVW	R24,R20
    00649 97C0      SBIW	R24,0x30
    0064A 2C2A      MOV	R2,R10
    0064B 2433      CLR	R3
    0064C 0E28      ADD	R2,R24
    0064D 1E39      ADC	R3,R25
    0064E 2CA2      MOV	R10,R2
    0064F 92A0 00B9 STS	yellowTime,R10
    00651 E027      LDI	R18,7
    00652 E030      LDI	R19,0
    00653 2D02      MOV	R16,R2
    00654 2711      CLR	R17
    00655 940E 0177 CALL	_Write_EEprom
    00657 2422      CLR	R2
    00658 9220 006B STS	k,R2
    0065A E08C      LDI	R24,0xC
    0065B E090      LDI	R25,0
    0065C 8399      STD	Y+1,R25
    0065D 8388      ST	Y,R24
    0065E EB2A      LDI	R18,0xBA
    0065F E030      LDI	R19,0
    00660 E806      LDI	R16,0x86
    00661 E010      LDI	R17,0
    00662 940E 0734 CALL	_strncmp
    00664 0158      MOVW	R10,R16
    00665 3000      CPI	R16,0
    00666 0701      CPC	R16,R17
    00667 F451      BNE	0x0672
    00668 E081      LDI	R24,1
    00669 9380 006C STS	urgencyFlag,R24
    0066B 2422      CLR	R2
    0066C 9220 006D STS	daytimeFlag,R2
    0066E 9220 006E STS	nightFlag,R2
    00670 9220 006B STS	k,R2
    00672 E08B      LDI	R24,0xB
    00673 E090      LDI	R25,0
    00674 8399      STD	Y+1,R25
    00675 8388      ST	Y,R24
    00676 EB2A      LDI	R18,0xBA
    00677 E030      LDI	R19,0
    00678 E70A      LDI	R16,0x7A
    00679 E010      LDI	R17,0
    0067A 940E 0734 CALL	_strncmp
    0067C 0158      MOVW	R10,R16
    0067D 3000      CPI	R16,0
    0067E 0701      CPC	R16,R17
    0067F F461      BNE	0x068C
    00680 2422      CLR	R2
    00681 9220 006C STS	urgencyFlag,R2
    00683 E081      LDI	R24,1
    00684 9380 006D STS	daytimeFlag,R24
    00686 9220 006E STS	nightFlag,R2
    00688 9220 0068 STS	secCount,R2
    0068A 9220 006B STS	k,R2
    0068C E08A      LDI	R24,0xA
    0068D E090      LDI	R25,0
    0068E 8399      STD	Y+1,R25
    0068F 8388      ST	Y,R24
    00690 EB2A      LDI	R18,0xBA
    00691 E030      LDI	R19,0
    00692 E60F      LDI	R16,0x6F
    00693 E010      LDI	R17,0
    00694 940E 0734 CALL	_strncmp
    00696 0158      MOVW	R10,R16
    00697 3000      CPI	R16,0
    00698 0701      CPC	R16,R17
    00699 F4E9      BNE	0x06B7
    0069A D03C      RCALL	_usart_get
    0069B 0158      MOVW	R10,R16
    0069C E00A      LDI	R16,0xA
    0069D E010      LDI	R17,0
    0069E 0195      MOVW	R18,R10
    0069F 940E 0760 CALL	empy16s
    006A1 01C8      MOVW	R24,R16
    006A2 5E80      SUBI	R24,0xE0
    006A3 4091      SBCI	R25,1
    006A4 2EA8      MOV	R10,R24
    006A5 D031      RCALL	_usart_get
    006A6 01A8      MOVW	R20,R16
    006A7 01CA      MOVW	R24,R20
    006A8 97C0      SBIW	R24,0x30
    006A9 2C2A      MOV	R2,R10
    006AA 2433      CLR	R3
    006AB 0E28      ADD	R2,R24
    006AC 1E39      ADC	R3,R25
    006AD 2CA2      MOV	R10,R2
    006AE E082      LDI	R24,2
    006AF 8388      ST	Y,R24
    006B0 2D22      MOV	R18,R2
    006B1 ED00      LDI	R16,0xD0
    006B2 940E 048C CALL	_TWI_Write
    006B4 2422      CLR	R2
    006B5 9220 006B STS	k,R2
    006B7 9622      ADIW	R28,2
    006B8 940E 0787 CALL	pop_xgset300C
    006BA 9009      LD	R0,Y+
    006BB BE0F      OUT	0x3F,R0
    006BC 91F9      LD	R31,Y+
    006BD 91E9      LD	R30,Y+
    006BE 91B9      LD	R27,Y+
    006BF 91A9      LD	R26,Y+
    006C0 9199      LD	R25,Y+
    006C1 9189      LD	R24,Y+
    006C2 9139      LD	R19,Y+
    006C3 9129      LD	R18,Y+
    006C4 9119      LD	R17,Y+
    006C5 9109      LD	R16,Y+
    006C6 9099      LD	R9,Y+
    006C7 9089      LD	R8,Y+
    006C8 9079      LD	R7,Y+
    006C9 9069      LD	R6,Y+
    006CA 9059      LD	R5,Y+
    006CB 9049      LD	R4,Y+
    006CC 9039      LD	R3,Y+
    006CD 9029      LD	R2,Y+
    006CE 9019      LD	R1,Y+
    006CF 9009      LD	R0,Y+
    006D0 9518      RETI
_usart_send:
  data                 --> R16
    006D1 9B5D      SBIS	0x0B,5
    006D2 CFFE      RJMP	_usart_send
    006D3 B90C      OUT	0x0C,R16
    006D4 9B5E      SBIS	0x0B,6
    006D5 CFFE      RJMP	0x06D4
    006D6 9508      RET
_usart_get:
    006D7 9B5F      SBIS	0x0B,7
    006D8 CFFE      RJMP	_usart_get
    006D9 B10C      IN	R16,0x0C
    006DA 9508      RET
_HC_595_init:
    006DB B384      IN	R24,0x14
    006DC 6E84      ORI	R24,0xE4
    006DD BB84      OUT	0x14,R24
    006DE B385      IN	R24,0x15
    006DF 6E84      ORI	R24,0xE4
    006E0 BB85      OUT	0x15,R24
    006E1 9508      RET
_Send_Seg:
  i                    --> R20
  data                 --> R16
    006E2 934A      ST	-Y,R20
    006E3 2744      CLR	R20
    006E4 C009      RJMP	0x06EE
    006E5 98AD      CBI	0x15,5
    006E6 FF07      SBRS	R16,7
    006E7 C002      RJMP	0x06EA
    006E8 9AAF      SBI	0x15,7
    006E9 C001      RJMP	0x06EB
    006EA 98AF      CBI	0x15,7
    006EB 9AAD      SBI	0x15,5
    006EC 0F00      LSL	R16
    006ED 9543      INC	R20
    006EE 3048      CPI	R20,0x8
    006EF F3A8      BCS	0x06E5
    006F0 9149      LD	R20,Y+
    006F1 9508      RET
_Send_Dip:
  i                    --> R20
  data                 --> R16
    006F2 934A      ST	-Y,R20
    006F3 2744      CLR	R20
    006F4 C009      RJMP	0x06FE
    006F5 98AA      CBI	0x15,2
    006F6 FF07      SBRS	R16,7
    006F7 C002      RJMP	0x06FA
    006F8 9AAF      SBI	0x15,7
    006F9 C001      RJMP	0x06FB
    006FA 98AF      CBI	0x15,7
    006FB 9AAA      SBI	0x15,2
    006FC 0F00      LSL	R16
    006FD 9543      INC	R20
    006FE 3048      CPI	R20,0x8
    006FF F3A8      BCS	0x06F5
    00700 9149      LD	R20,Y+
    00701 9508      RET
_Drive_HC595:
  hc_bit               --> R12
  data                 --> R10
    00702 92AA      ST	-Y,R10
    00703 92CA      ST	-Y,R12
    00704 2EC2      MOV	R12,R18
    00705 2EA0      MOV	R10,R16
    00706 20CC      TST	R12
    00707 F031      BEQ	0x070E
    00708 98AA      CBI	0x15,2
    00709 98AE      CBI	0x15,6
    0070A 2D0A      MOV	R16,R10
    0070B DFE6      RCALL	_Send_Dip
    0070C 9AAE      SBI	0x15,6
    0070D C005      RJMP	0x0713
    0070E 98AD      CBI	0x15,5
    0070F 98AE      CBI	0x15,6
    00710 2D0A      MOV	R16,R10
    00711 DFD0      RCALL	_Send_Seg
    00712 9AAE      SBI	0x15,6
    00713 90C9      LD	R12,Y+
    00714 90A9      LD	R10,Y+
    00715 9508      RET
_Write_Data:
  data                 --> R10
  bit                  --> R12
    00716 92AA      ST	-Y,R10
    00717 92CA      ST	-Y,R12
    00718 2EA2      MOV	R10,R18
    00719 2EC0      MOV	R12,R16
    0071A E021      LDI	R18,1
    0071B EB80      LDI	R24,0xB0
    0071C E090      LDI	R25,0
    0071D 2DEC      MOV	R30,R12
    0071E 27FF      CLR	R31
    0071F 0FE8      ADD	R30,R24
    00720 1FF9      ADC	R31,R25
    00721 8100      LD	R16,Z
    00722 9500      COM	R16
    00723 DFDE      RCALL	_Drive_HC595
    00724 2722      CLR	R18
    00725 EA84      LDI	R24,0xA4
    00726 E090      LDI	R25,0
    00727 2DEA      MOV	R30,R10
    00728 27FF      CLR	R31
    00729 0FE8      ADD	R30,R24
    0072A 1FF9      ADC	R31,R25
    0072B 8100      LD	R16,Z
    0072C DFD5      RCALL	_Drive_HC595
    0072D E005      LDI	R16,5
    0072E E010      LDI	R17,0
    0072F 940E 00C5 CALL	_delay_nms
    00731 90C9      LD	R12,Y+
    00732 90A9      LD	R10,Y+
    00733 9508      RET
_strncmp:
    00734 8188      LD	R24,Y
    00735 8199      LDD	R25,Y+1
    00736 3080      CPI	R24,0
    00737 0798      CPC	R25,R24
    00738 F061      BEQ	0x0745
    00739 2FF1      MOV	R31,R17
    0073A 2FE0      MOV	R30,R16
    0073B 2FB3      MOV	R27,R19
    0073C 2FA2      MOV	R26,R18
    0073D 9101      LD	R16,Z+
    0073E 911D      LD	R17,X+
    0073F 1B01      SUB	R16,R17
    00740 F429      BNE	0x0746
    00741 2311      TST	R17
    00742 F011      BEQ	0x0745
    00743 9701      SBIW	R24,1
    00744 F7C1      BNE	0x073D
    00745 2700      CLR	R16
    00746 0B11      SBC	R17,R17
    00747 9508      RET
mod8u:
    00748 9468      BSET	6
    00749 C001      RJMP	xdiv8u
div8u:
    0074A 94E8      BCLR	6
xdiv8u:
    0074B 932A      ST	-Y,R18
    0074C 92FA      ST	-Y,R15
    0074D 92EA      ST	-Y,R14
    0074E 24FF      CLR	R15
    0074F 24EE      CLR	R14
    00750 E120      LDI	R18,0x10
    00751 0F00      LSL	R16
    00752 1CFF      ROL	R15
    00753 1CEE      ROL	R14
    00754 16E1      CP	R14,R17
    00755 F010      BCS	0x0758
    00756 1AE1      SUB	R14,R17
    00757 9503      INC	R16
    00758 952A      DEC	R18
    00759 F7B9      BNE	0x0751
    0075A F40E      BRTC	0x075C
    0075B 2D0E      MOV	R16,R14
    0075C 90E9      LD	R14,Y+
    0075D 90F9      LD	R15,Y+
    0075E 9129      LD	R18,Y+
    0075F 9508      RET
empy16s:
    00760 920A      ST	-Y,R0
    00761 921A      ST	-Y,R1
    00762 938A      ST	-Y,R24
    00763 939A      ST	-Y,R25
    00764 9F02      MUL	R16,R18
    00765 01C0      MOVW	R24,R0
    00766 9F12      MUL	R17,R18
    00767 0D90      ADD	R25,R0
    00768 9F03      MUL	R16,R19
    00769 0D90      ADD	R25,R0
    0076A 018C      MOVW	R16,R24
    0076B 9199      LD	R25,Y+
    0076C 9189      LD	R24,Y+
    0076D 9019      LD	R1,Y+
    0076E 9009      LD	R0,Y+
    0076F 9508      RET
pop_xgset00FC:
    00770 90A9      LD	R10,Y+
    00771 90B9      LD	R11,Y+
    00772 90C9      LD	R12,Y+
    00773 90D9      LD	R13,Y+
    00774 90E9      LD	R14,Y+
    00775 90F9      LD	R15,Y+
    00776 9508      RET
push_xgsetF0FC:
    00777 937A      ST	-Y,R23
    00778 936A      ST	-Y,R22
push_xgset30FC:
    00779 935A      ST	-Y,R21
    0077A 934A      ST	-Y,R20
push_xgset00FC:
    0077B 92FA      ST	-Y,R15
    0077C 92EA      ST	-Y,R14
push_xgset003C:
    0077D 92DA      ST	-Y,R13
    0077E 92CA      ST	-Y,R12
    0077F 92BA      ST	-Y,R11
    00780 92AA      ST	-Y,R10
    00781 9508      RET
push_xgset300C:
    00782 935A      ST	-Y,R21
    00783 934A      ST	-Y,R20
    00784 92BA      ST	-Y,R11
    00785 92AA      ST	-Y,R10
    00786 9508      RET
pop_xgset300C:
    00787 90A9      LD	R10,Y+
    00788 90B9      LD	R11,Y+
    00789 9149      LD	R20,Y+
    0078A 9159      LD	R21,Y+
    0078B 9508      RET
